- lastApplied: the index of the command that was last executed
- AppendEntries RPC also performs consistency check
- One AppendEntries RPC for each term to find the term that is conflicting
- committed index: An entry is considered commited if majority of the servers holds this entry in its log

- The tester requires that the leader send heartbeat RPCs no more than ten times per second.

- implement timer with (goroutine + select + channel), goroutine either receives heartbeat and remain as follower or sleep through election timeout and convert to candidate

- How often should leader broadcast heartbeat message?
- 100 ms was too long for peers with short sleeping duration
- 50 ms is a safer gap

- use mutex in appendentries and requestvote to prevent race conditions

- labrpc package simulates a lossy network environment
- network is lossy, hence it is entirely possible for heartbeat, messages to get lost

- heartbeat channel: used for receiving heartbeats
- leader channel: used for notifying a peer of becoming a leader

- Don't forget to reset peer state whenever state change happens

- handling leader rejoin: rejoined leader should realize a stale self upon receiving heartbeat replies and convert to follower

- The RPC call function is a blocking function, it waits for the RPC to complete

- Commit entries one by one vs. Commit entries by batch
	* Notify peers of an entry commit via heartbeat routine
	* Leader realizes an entry is committed via heartbeat routine's reply

- If there exists an N such that N > commitIndex, a majority of matchIndex[i] â‰¥ N, and log[N].term == currentTerm: set commitIndex = N.

- There are too many ways of designing a raft system, even though they are all capable of representing the central idea of raft

- Remember to kill goroutines via raft's builtin Killed() method!

- Use lock to prevent sending multiple logs at once

- Remember to update INDEX value inside Start() function, since log index might change under concurrent environment

- Channels: if a thread waits on a channel and two other threads pushed to the same channel, the main thread will be unblocked twice if it waits on the channel twice

- Leader rejoin test: 
	Leader 1 commit -> leader 1 disconnect -> leader 1 commit -> leader 2 elect -> leader 2 commit-> leader 2 disconnect -> leader 3 election failure -> leader 1 rejoin -> leader 1 commit -> leader 2 rejoin -> overwrite leader 2 entries

go test -run 2A

- On log append failures, request for additional logs from leader starting from peer's last commit index

- It is guaranteed that if two logs at the same index has same term number, their entry will be the same

- cfg.one retry causes duplicated entries, is this something we desire of? (No)

- heartbeat routine should be responsible for maintaining log consistency
















































